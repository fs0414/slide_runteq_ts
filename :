---
# You can also start simply with 'default'
theme: geist
# random image from a curated Unsplash collection by Anthony
# like them? see https://unsplash.com/collections/94734566/slidev
# background: https://cover.sli.dev
# some information about your slides (markdown enabled)
title: Hello TypeScript
# apply unocss classes to the current slide
# class: text-center
# https://sli.dev/features/drawing
#drawings:
  #persist: false
# slide transition: https://sli.dev/guide/animations.html#slide-transitions
transition: slide-left
layout: cover
---

# Hello TypeScript

<br />

RUNTEQ.ts

fujitani sora / @_fs0414

<div class="abs-br m-6 text-xl">
  <button @click="$slidev.nav.openInEditor()" title="Open in Editor" class="slidev-icon-btn">
    <carbon:edit />
  </button>
  <a href="https://github.com/slidevjs/slidev" target="_blank" class="slidev-icon-btn">
    <carbon:logo-github />
  </a>
</div>

<style>
h1 {
  background-color: #2B90B6;
  background-image: linear-gradient(45deg, #4EC5D4 10%, #146b8c 20%);
  background-size: 100%;
  margin-left: 100px;
  -webkit-background-clip: text;
  -moz-background-clip: text;
  -webkit-text-fill-color: transparent;
  -moz-text-fill-color: transparent;
}

p {
    margin-left: 100px;
    color: #ffffff;
}
</style>


<!--
The last comment block of each slide will be treated as slide notes. It will be visible and editable in Presenter Mode along with the slide. [Read more in the docs](https://sli.dev/guide/syntax.html#notes)
-->

---
transition: slide-left
---

# 注意

- TypeScriptを説明する為にRubyを引き合いに出しますが、Rubyのことは大好きですよ<br />
<br />
- 説明の為に、厳密さよりも分かりやすさを優先して資料を構成しています。<br />
  詳細が気になる方はDocmentationを参照してください。<br />
<br />
- Webアプリケーション開発の話は後の人がしてくれると思うので、自分は少し抽象的な話をします。<br />
  よって、よくわからない話が多いかもしれません。今日で全てを理解するのは無理です。<br />
  ただ、エンジニアリングというのは常に「分からなさ」との駆け引きです。<br />
  今日のイベントで得る「分からなさ」を大切に育てていってください

---
transition: slide-left 
---

# 問題：Rubyで記述された変数hogeには、なんのデータ型が入るか

1 string<br />
2 integer<br />
3 boolean


```rb
name = ?
```

<v-click>
```rb

name = "sora"

name = 23

name = true
```

全部入る<br />
どのデータ型でも変数に代入可能
</v-click>

<style>
h1 {
    font-size: 20px;
}
</style>

---
transition: slide-left
---

# 問題: TypeScriptで記述された変数hogeには、なんのデータ型が入るか

1 string<br />
2 number（integer）<br />
3 boolean

```typescript

let name: string = ?
```

---
transition: slide-left
---

# 問題: TypeScriptで記述された変数hogeには、なんのデータ型が入るか

1 string<br />
2 number（integer）<br />
3 boolean

```typescript

let name: string = "name";

let name: string = 23;
// Type 'number' is not assignable to type 'string'.

let name: string = true;
// Type 'boolean' is not assignable to type 'string'.
```
<br />

- 変数に :string を記述することで、string以外の代入がエラーになる

### Hello TypeScript !!

---
transition: slide-left
---

# TypeScriptが解決すること

基本的に全てのツールは、なんらかの課題を解決するために誰かが作って使っている。<br />
TypeScriptが解決することは何か、なぜここまでユーザーが多いのか

---
transition: slide-left
---

# TypeScriptが解決すること

JavaScript<br />
動的型付け言語であり、GitHubが公開する言語ランキングでも毎年上位Top3に入る<br />

対照的に、よくわからん挙動が多く議論の槍玉に挙げられることも多い（諸説あり）<br />

- nullとundefind<br />
[The history of “typeof null”](1https://2ality.com/2013/10/tyeof-null.html)

- 安定しないDate（日付）の挙動
    - [Fixing JavaScript Date](https://maggiepint.com/2017/04/09/fixing-javascript-date-getting-started/)
- 暗黙的なデータ型の変換など、言語から提供されるメソッド名からは予測しずらい挙動<br />
    - 俗にいう「weakly typed（弱い型付け）」
    - [What you need to know about Javascript's Implicit Coercion](https://dev.to/promisetochi/what-you-need-to-know-about-javascripts-implicit-coercion-e23)

---
transition: slide-left
---

# TypeScriptが解決すること

> It is now common knowledge that in 1995 Brendan was given only 10 days to write the JavaScript language and get it into Netscape.<br />
[Was Javascript really made in 10 days?](https://buttondown.com/hillelwayne/archive/did-brendan-eich-really-make-javascript-in-10-days/)


> 面接ではJavaScriptの悪口をたくさん言いました。<br />
[筑波大学情報学群情報科学類を卒業した](https://sosukesuzuki.dev/posts/graduate-tsukuba-univ/#fnref2)

<br />
<v-click>
では、なぜここまでJavaScriptを使用する開発者が多いのか？🤔<br />
JavaScriptという言語のある特性に要因がある
</v-click>

---
transition: slide-left
---

# TypeScriptが解決すること

JavaScriptは、ブラウザ上で動作するプログラミング言語である<br />
というポイント。

Web開発者、主にFrontendはJavaScriptを避けられなかった。<br />
Frontend技術の発展もあり、複数人が関わる大規模なレポジトリをJavaScriptで運用する必要が出てくる<br />
つらい

<v-click>
これらの課題を解決するべくJavaScript言語をベースに改良や機能導入を加えたのが、TypeScriptという言語である。<br />

- 静的型付けの導入 ← 今日のポイント
- Moduleの拡張

[Ten Years of TypeScript](https://devblogs.microsoft.com/typescript/ten-years-of-typescript/)
</v-click>

---
transition: slide-left
---

# データと型

言語やDBには、データの単位とそれを統一的に扱うための型という概念がある。<br />
データ型とは、一般的に「データの分類」を定義するものである。<br />

Ruby<br />String, Integer, Boolean ...

JavaScript<br />String, Number, Boolean ...

MySQL<br />String, Int, Boolean ...

Rubyにおいては、StringやIntegerなどの「どのクラスのインスタンスであるか」がデータ型と対応している

---
transition: slide-left
---

# 動的型付け

<div class="text-sm">
TSの比較対象としてはJSが正しい気もするが「動的型付け言語」という意味では同じ挙動をするので、分かりやすさのためにRubyを例にする
</div>

おさらい<br />
Rubyには、データ型という概念がある<br />
String, Integer, Boolean, Date, Array ...

Rubyは、コードを実行した時に初めて変数の型が確定する言語である。<br />
動かして初めて型が決まるので「動的型付け言語」

```ruby
# String型の値を変数nameに代入
name = "sora"
puts name.kind_of?(String) # => true

# String型には存在しない、noImplMethodという適当なメソッドにアクセスする
name.noImplMethod
```

---
transition: slide-left
---

# 動的型付け

```ruby
# 1p前と同じコード
# String型の値を変数nameに代入
name = "sora"
puts name.kind_of?(String) # => true

# String型には存在しない、noImplMethodという適当なメソッドにアクセスする
name.noImplMethod
```

```sh
$ ruby main.rb
# => undefined method `noImplMethod' for an instance of String (NoMethodError)
```

裏を返すと「実行するまで、書いたコードが通るかが分からない」という特徴になる

<br />

エラーになるコードを記述しても、エディタは何も言わない<br />
<img class="w-80 h-15" src="./public/スクリーンショット 2025-04-07 16.26.16.png" alt="ローカル画像" />

---
transition: slide-left
---

# 静的型付け

動的型付け言語の対比として、実行前に記述したコードの型が確定する言語を「静的型付け言語」と呼ぶ。<br />
コードを動かす前に（静的に）型が確定するので「静的型付け言語」<br />
TypeScriptは、JavaScriptをベースにした静的型付け言語に分類されます。<br />

```ts
// TypeScript
let name: string = "sora";

name.noImplMethod()
// Property 'noImplMethod' does not exist on type 'string'.
// ざっくり、string型の変数にそんな名前のメソッドは定義されていないと言われている
```

---
transition: slide-left
---

# 静的型付け


特徴の一つとして、実行前にコードの解析を行い型を確定させ、エディタ上でエラーを検知することができる。<br />


<br />

<img class="w-100 h-15" src="./public/スクリーンショット 2025-04-07 3.19.20.png" alt="ローカル画像" />

---
transition: slide-left
---

# 静的型付け

実行前に、静的に型を確定させる

<v-click>
<img class="w-100 h-90" src="./public/スクリーンショット 2025-04-07 17.07.24.png" alt="ローカル画像" />
</v-click>

---
transition: slide-left
---

# Rubyが構文エラーを出す仕組み








---
layout: two-cols
layoutClass: gap-16
---

# Table of contents

You can use the `Toc` component to generate a table of contents for your slides:

```html
<Toc minDepth="1" maxDepth="1" />
```

The title will be inferred from your slide content, or you can override it with `title` and `level` in your frontmatter.

::right::

<Toc text-sm minDepth="1" maxDepth="2" />

---
layout: image-right
image: https://cover.sli.dev
---

# Code

Use code snippets and get the highlighting directly, and even types hover!

```ts {all|5|7|7-8|10|all} twoslash
// TwoSlash enables TypeScript hover information
// and errors in markdown code blocks
// More at https://shiki.style/packages/twoslash

import { computed, ref } from 'vue'

const count = ref(0)
const doubled = computed(() => count.value * 2)

doubled.value = 2
```

<arrow v-click="[4, 5]" x1="350" y1="310" x2="195" y2="334" color="#953" width="2" arrowSize="1" />

<!-- This allow you to embed external code blocks -->
<<< @/snippets/external.ts#snippet

<!-- Footer -->

[Learn more](https://sli.dev/features/line-highlighting)

<!-- Inline style -->
<style>
.footnotes-sep {
  @apply mt-5 opacity-10;
}
.footnotes {
  @apply text-sm opacity-75;
}
.footnote-backref {
  display: none;
}
</style>

<!--
Notes can also sync with clicks

[click] This will be highlighted after the first click

[click] Highlighted with `count = ref(0)`

[click:3] Last click (skip two clicks)
-->

---
level: 2
---

# Shiki Magic Move

Powered by [shiki-magic-move](https://shiki-magic-move.netlify.app/), Slidev supports animations across multiple code snippets.

Add multiple code blocks and wrap them with <code>````md magic-move</code> (four backticks) to enable the magic move. For example:

````md magic-move {lines: true}
```ts {*|2|*}
// step 1
const author = reactive({
  name: 'John Doe',
  books: [
    'Vue 2 - Advanced Guide',
    'Vue 3 - Basic Guide',
    'Vue 4 - The Mystery'
  ]
})
```

```ts {*|1-2|3-4|3-4,8}
// step 2
export default {
  data() {
    return {
      author: {
        name: 'John Doe',
        books: [
          'Vue 2 - Advanced Guide',
          'Vue 3 - Basic Guide',
          'Vue 4 - The Mystery'
        ]
      }
    }
  }
}
```

```ts
// step 3
export default {
  data: () => ({
    author: {
      name: 'John Doe',
      books: [
        'Vue 2 - Advanced Guide',
        'Vue 3 - Basic Guide',
        'Vue 4 - The Mystery'
      ]
    }
  })
}
```

Non-code blocks are ignored.

```vue
<!-- step 4 -->
<script setup>
const author = {
  name: 'John Doe',
  books: [
    'Vue 2 - Advanced Guide',
    'Vue 3 - Basic Guide',
    'Vue 4 - The Mystery'
  ]
}
</script>
```
````

---

# Components

<div grid="~ cols-2 gap-4">
<div>

You can use Vue components directly inside your slides.

We have provided a few built-in components like `<Tweet/>` and `<Youtube/>` that you can use directly. And adding your custom components is also super easy.

```html
<Counter :count="10" />
```

<!-- ./components/Counter.vue -->
<Counter :count="10" m="t-4" />

Check out [the guides](https://sli.dev/builtin/components.html) for more.

</div>
<div>

```html
<Tweet id="1390115482657726468" />
```

<Tweet id="1390115482657726468" scale="0.65" />

</div>
</div>

<!--
Presenter note with **bold**, *italic*, and ~~striked~~ text.

Also, HTML elements are valid:
<div class="flex w-full">
  <span style="flex-grow: 1;">Left content</span>
  <span>Right content</span>
</div>
-->

---
class: px-20
---

# Themes

Slidev comes with powerful theming support. Themes can provide styles, layouts, components, or even configurations for tools. Switching between themes by just **one edit** in your frontmatter:

<div grid="~ cols-2 gap-2" m="t-2">

```yaml
---
theme: default
---
```

```yaml
---
theme: seriph
---
```

<img border="rounded" src="https://github.com/slidevjs/themes/blob/main/screenshots/theme-default/01.png?raw=true" alt="">

<img border="rounded" src="https://github.com/slidevjs/themes/blob/main/screenshots/theme-seriph/01.png?raw=true" alt="">

</div>

Read more about [How to use a theme](https://sli.dev/guide/theme-addon#use-theme) and
check out the [Awesome Themes Gallery](https://sli.dev/resources/theme-gallery).

---

# Clicks Animations

You can add `v-click` to elements to add a click animation.

<div v-click>

This shows up when you click the slide:

```html
<div v-click>This shows up when you click the slide.</div>
```

</div>

<br>

<v-click>

The <span v-mark.red="3"><code>v-mark</code> directive</span>
also allows you to add
<span v-mark.circle.orange="4">inline marks</span>
, powered by [Rough Notation](https://roughnotation.com/):

```html
<span v-mark.underline.orange>inline markers</span>
```

</v-click>

<div mt-20 v-click>

[Learn more](https://sli.dev/guide/animations#click-animation)

</div>

---

# Motions

Motion animations are powered by [@vueuse/motion](https://motion.vueuse.org/), triggered by `v-motion` directive.

```html
<div
  v-motion
  :initial="{ x: -80 }"
  :enter="{ x: 0 }"
  :click-3="{ x: 80 }"
  :leave="{ x: 1000 }"
>
  Slidev
</div>
```

<div class="w-60 relative">
  <div class="relative w-40 h-40">
    <img
      v-motion
      :initial="{ x: 800, y: -100, scale: 1.5, rotate: -50 }"
      :enter="final"
      class="absolute inset-0"
      src="https://sli.dev/logo-square.png"
      alt=""
    />
    <img
      v-motion
      :initial="{ y: 500, x: -100, scale: 2 }"
      :enter="final"
      class="absolute inset-0"
      src="https://sli.dev/logo-circle.png"
      alt=""
    />
    <img
      v-motion
      :initial="{ x: 600, y: 400, scale: 2, rotate: 100 }"
      :enter="final"
      class="absolute inset-0"
      src="https://sli.dev/logo-triangle.png"
      alt=""
    />
  </div>

  <div
    class="text-5xl absolute top-14 left-40 text-[#2B90B6] -z-1"
    v-motion
    :initial="{ x: -80, opacity: 0}"
    :enter="{ x: 0, opacity: 1, transition: { delay: 2000, duration: 1000 } }">
    Slidev
  </div>
</div>

<!-- vue script setup scripts can be directly used in markdown, and will only affects current page -->
<script setup lang="ts">
const final = {
  x: 0,
  y: 0,
  rotate: 0,
  scale: 1,
  transition: {
    type: 'spring',
    damping: 10,
    stiffness: 20,
    mass: 2
  }
}
</script>

<div
  v-motion
  :initial="{ x:35, y: 30, opacity: 0}"
  :enter="{ y: 0, opacity: 1, transition: { delay: 3500 } }">

[Learn more](https://sli.dev/guide/animations.html#motion)

</div>

---

# LaTeX

LaTeX is supported out-of-box. Powered by [KaTeX](https://katex.org/).

<div h-3 />

Inline $\sqrt{3x-1}+(1+x)^2$

Block
$$ {1|3|all}
\begin{aligned}
\nabla \cdot \vec{E} &= \frac{\rho}{\varepsilon_0} \\
\nabla \cdot \vec{B} &= 0 \\
\nabla \times \vec{E} &= -\frac{\partial\vec{B}}{\partial t} \\
\nabla \times \vec{B} &= \mu_0\vec{J} + \mu_0\varepsilon_0\frac{\partial\vec{E}}{\partial t}
\end{aligned}
$$

[Learn more](https://sli.dev/features/latex)

---

# Diagrams

You can create diagrams / graphs from textual descriptions, directly in your Markdown.

<div class="grid grid-cols-4 gap-5 pt-4 -mb-6">

```mermaid {scale: 0.5, alt: 'A simple sequence diagram'}
sequenceDiagram
    Alice->John: Hello John, how are you?
    Note over Alice,John: A typical interaction
```

```mermaid {theme: 'neutral', scale: 0.8}
graph TD
B[Text] --> C{Decision}
C -->|One| D[Result 1]
C -->|Two| E[Result 2]
```

```mermaid
mindmap
  root((mindmap))
    Origins
      Long history
      ::icon(fa fa-book)
      Popularisation
        British popular psychology author Tony Buzan
    Research
      On effectiveness<br/>and features
      On Automatic creation
        Uses
            Creative techniques
            Strategic planning
            Argument mapping
    Tools
      Pen and paper
      Mermaid
```

```plantuml {scale: 0.7}
@startuml

package "Some Group" {
  HTTP - [First Component]
  [Another Component]
}

node "Other Groups" {
  FTP - [Second Component]
  [First Component] --> FTP
}

cloud {
  [Example 1]
}

database "MySql" {
  folder "This is my folder" {
    [Folder 3]
  }
  frame "Foo" {
    [Frame 4]
  }
}

[Another Component] --> [Example 1]
[Example 1] --> [Folder 3]
[Folder 3] --> [Frame 4]

@enduml
```

</div>

Learn more: [Mermaid Diagrams](https://sli.dev/features/mermaid) and [PlantUML Diagrams](https://sli.dev/features/plantuml)

---
foo: bar
dragPos:
  square: 691,32,167,_,-16
---

# Draggable Elements

Double-click on the draggable elements to edit their positions.

<br>

###### Directive Usage

```md
<img v-drag="'square'" src="https://sli.dev/logo.png">
```

<br>

###### Component Usage

```md
<v-drag text-3xl>
  <div class="i-carbon:arrow-up" />
  Use the `v-drag` component to have a draggable container!
</v-drag>
```

<v-drag pos="663,206,261,_,-15">
  <div text-center text-3xl border border-main rounded>
    Double-click me!
  </div>
</v-drag>

<img v-drag="'square'" src="https://sli.dev/logo.png">

###### Draggable Arrow

```md
<v-drag-arrow two-way />
```

<v-drag-arrow pos="67,452,253,46" two-way op70 />

---
src: ./pages/imported-slides.md
hide: false
---

---

# Monaco Editor

Slidev provides built-in Monaco Editor support.

Add `{monaco}` to the code block to turn it into an editor:

```ts {monaco}
import { ref } from 'vue'
import { emptyArray } from './external'

const arr = ref(emptyArray(10))
```

Use `{monaco-run}` to create an editor that can execute the code directly in the slide:

```ts {monaco-run}
import { version } from 'vue'
import { emptyArray, sayHello } from './external'

sayHello()
console.log(`vue ${version}`)
console.log(emptyArray<number>(10).reduce(fib => [...fib, fib.at(-1)! + fib.at(-2)!], [1, 1]))
```

---
layout: center
class: text-center
---

# Learn More

[Documentation](https://sli.dev) · [GitHub](https://github.com/slidevjs/slidev) · [Showcases](https://sli.dev/resources/showcases)

<PoweredBySlidev mt-10 />
